<-

lINKS DE LOS CERTIFICADOS: 

-GIT: https://www.udemy.com/certificate/UC-WXBJUD37/?utm_campaign=email&utm_source=sendgrid.com&utm_medium=email
-VELOCIDAD: https://www.udemy.com/certificate/UC-3IKLCDQT/?utm_campaign=email&utm_source=sendgrid.com&utm_medium=email

-------consultas adicionales-------

1) programacion reactiva: basicamente se basa en el cotrol del flujo de los datos (stream) 
principalmente basada en funciones asincronas ( no se sabe en que momento se va obtener una respuesta ejm consumo de api)
este control se aplica con observables y las promesas.
2) clase injectable: los injectables dentro de app se encentran en el vector de providers,
se utilizan para crear un servicio y su manejo para evitar que esto lo haga un componente

------consulta----------------------

PUNTO 1)

-Un observable en RXJS:

Basicamente un observable un objeto representado por la instancia de cualquier evento o estrucutura de datos, alli se pueden analizar arrays,
eventos de un formulario (submit) etc.

ejemplo 

const myObservable$ = Rx.Observable.from([1,2,3]);

-Un observer en RXJS:
El observer es el seguimiento que va tener el observable quiere decir que es el analizador del flujo de datos en todo momento,
por ejemplo la actividad reciente de las personas que sigues en instagram

ejemplo

const myObserver = {  
  next: x => console.log(`Observer next value: ${x}`),
  error: err => console.error(`Observer error value: ${x}`),
  complete: () => console.log(`Observer complete notification`),
};

-Un observer en RXJS:
ejemplo de la implementacion de un observable

-Subject en RXJS:
Es el encargado de aplicar los eventos(observer) a un observable

ejemplo

myObservable$.subscribe(myObserver);

nota: en un observable se puede obtener multiples respuestas, cada vez que se obtengan resultados

PUNTO 2)

ECMAScript:

-Se puede decir que ECMAScript es un estandar que rige los estandares de los lenguajes como JavaScript,JScript,etc ..
haciendo una analogia ECMAScript es el lenguaje y JavaScript es un dialecto.

-Ultima version:7

datos relevantes:

-ECMAScript basado en el popular lenguaje JavaScript propuesto como estándar por Netscape Communications Corporation.
-Actualmente está aceptado como el estándar ISO 16262.

PUNTO 3)

Una promesa basicamente es una funcion asincrona que se puede aplicar cuando se realiza un proceso
que posiblemente se asicnrono por ejemple l consumo de un webservice

ejemplo de como crear una funcion que devuelva un objeto promesa:

1) funcion(){
  return new Promise (
    (resultado) => {resultado("1");}
    );
}

2) funcion(){
  return new Promise (
  setTimeout(
    () => {resultado("1"); }, 3000 ),
  setTimeout(
    () => {resultado("123"); }, 1000 ); //este seria el primer resultado ya que es la resultado que va demorar menos
}

ejemplo de como utilizar la funcion que devuelva un objeto promesa:

var x;
x.funcion.then(
resultado => { console.log(resultado); }
);

nota: como se puede observar las promesas devuelven un unico resultado

Estilos de codificación:

1)Nombres de variable apropiadas
Una pieza clave para un buen estilo es la elección apropiada de nombres de variable.
Variables pobremente nombradas dificultan la lectura del código fuente y su comprensión.
2) Estilo de indentación
Estilo de indentación, en lenguajes de programación que usan llaves para indentar o delimitar bloques lógicos de código,
como por ejemplo C, es también un punto clave el buen estilo. Usando un estilo lógico y consistente hace el código de uno 
más legible.
3) Valores booleanos en estructuras de decisión
Algunos programadores piensan que las estructuras de decisión como las anteriores, donde el resultado de la decisión es
meramente una computación de un valor booleano, son demasiado prolijos e incluso propensos al error.
4) En los lenguajes de programación de la familia C se recomienda también evitar el uso de caracteres tabulador en medio de una línea,
ya que diferentes editores de textos muestran su anchura de forma diferente.
5) El lenguaje de programación Python usa indentación para indicar estructuras de control, por tanto se requiere obligatoriamente
una buena indentación. Haciendo esto, la necesidad de marcar con llaves ({ y }) es eliminada, y la legibilidad es mejorada
sin interferir con los estilos de codificación comunes. Con todo, esto lleva frecuentemente a problemas donde el código es
copiado y pegado dentro de un programa Python, requiriendo un tedioso reformateado. Adicionalmente, el código Python
se vuelve inusable cuando es publicado en un foro o página web que elimine el espacio en blanco.

cibergrafía: 

-https://devcode.la/blog/que-es-y-por-que-aprender-ecmascript/
-https://www.youtube.com/watch?v=UEB08bJIMGw
-https://www.arquitecturajava.com/promise-vs-observable-en-javascript/
-https://medium.com/angular-chile/inyecci%C3%B3n-de-componentes-y-directivas-en-angular-6ae75f64be66

-!>
